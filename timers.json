const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const fs = require('fs');

const app = express();
app.use(cors());
app.use(bodyParser.json());

const DATA_FILE = './timers.json';

let timers = [];
let nextId = 1;

function loadTimers() {
  if (fs.existsSync(DATA_FILE)) {
    const data = fs.readFileSync(DATA_FILE, 'utf-8');
    timers = JSON.parse(data);
    if (timers.length > 0) {
      nextId = Math.max(...timers.map(t => t.id)) + 1;
    }
  }
}

function saveTimers() {
  fs.writeFileSync(DATA_FILE, JSON.stringify(timers, null, 2));
}

loadTimers();

app.post('/api/timers', (req, res) => {
  const { pseudo, description } = req.body;
  if (timers.find(t => t.pseudo === pseudo)) {
    return res.status(400).json({ error: 'Timer with this username already exists' });
  }
  const newTimer = {
    id: nextId++,
    pseudo,
    description: description || '',
    seconds: 0,
    isRunning: true,
    createdAt: new Date(),
    lastUpdated: new Date()
  };
  timers.push(newTimer);
  saveTimers();
  res.status(201).json(newTimer);
});

app.get('/api/timers', (req, res) => {
  res.json(timers.sort((a, b) => b.seconds - a.seconds));
});

app.get('/api/timers/recent', (req, res) => {
  const recent = timers
    .sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated))
    .slice(0, 5);
  res.json(recent);
});

app.get('/api/timers/:pseudo', (req, res) => {
  const timer = timers.find(t => t.pseudo === req.params.pseudo);
  if (!timer) return res.status(404).json({ error: 'Timer not found' });
  res.json(timer);
});

app.put('/api/timers/:id', (req, res) => {
  const timer = timers.find(t => t.id === parseInt(req.params.id));
  if (!timer) return res.status(404).json({ error: 'Timer not found' });

  const { seconds, isRunning, description } = req.body;
  if (seconds !== undefined) timer.seconds = seconds;
  if (isRunning !== undefined) timer.isRunning = isRunning;
  if (description !== undefined) timer.description = description;
  timer.lastUpdated = new Date();

  saveTimers();
  res.json(timer);
});

app.delete('/api/timers/:id', (req, res) => {
  const index = timers.findIndex(t => t.id === parseInt(req.params.id));
  if (index === -1) return res.status(404).json({ error: 'Timer not found' });

  timers.splice(index, 1);
  saveTimers();
  res.json({ message: 'Timer deleted successfully' });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
